cclear="free && sync && echo 3 > /proc/sys/vm/drop_caches && free"

# ---------- prompt ----------
# {{{1
autoload -U colors && colors
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "
RPROMPT="%B%{$fg[blue]%}[%D{%y.%m.%f|%H:%M:%S}]%{$reset_color%}%b"

# 1}}}

# ---------- options ----------
# {{{1
setopt appendhistory extendedglob nomatch
unsetopt beep notify
unsetopt correctall
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt inc_append_history
setopt share_history
# 1}}}

# ---------- auto completion ----------
# {{{1
autoload -Uz compinit
compinit

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
# 1}}}

# ---------- key bindings ----------
# {{{1
bindkey -v
bindkey "^R" history-incremental-pattern-search-backward 
bindkey -s '^n' 'nn\n'
bindkey -s '^o' 'lfcd\n'

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^E' edit-command-line

# 1}}}

# ---------- aliases ----------
# {{{1
alias ls='ls --color=auto'
alias sl='ls --color=auto'
alias ll='ls -lh'

alias ssh-p='ssh -o PreferredAuthentications=password'
alias rgrep='grep -Ri --color=always'


alias grep='grep --color=always'
alias ip='ip -c'

alias play='vlc "$(ph current)" && ph next'
alias journalctl='sudo journalctl'

# git
alias gs='git status'
alias gl='git log'
alias ga='git add'
alias gcm='git commit -m'
# alias gpush='git push'
# alias gpull='git pull'

if  hash nvim 2>/dev/null; then
    alias vim='nvim'
fi

alias fixbt='sudo systemctl restart bluetooth && pulseaudio --kill && pulseaudio --start'

# 1}}}

# ---------- history settings ----------
# {{{1
HISTSIZE="2000"
HISTFILE="$HOME/.history"
SAVEHIST="$HISTSIZE"
# 1}}}

# ---------- exports ----------
# {{{1
export PATH="$PATH:${HOME}/.scripts/:${HOME}/bin:${HOME}/.local/bin:${HOME}/go/bin:${HOME}/Android/Sdk/platform-tools"
if [ "$SSH_CONNECTION" ]; then
    export TERM=xterm
fi
export wlan0=wlx00c0ca56bbff
export okular_cache=/home/user/.config/okularrc
if hash nvim 2>/dev/null; then
    export EDITOR=/usr/bin/nvim
else
    export EDITOR=/usr/bin/vim
fi
# 1}}}

# ---------- functions ----------
# {{{1

nn(){
    # choose from all alias, functions and scripts
    __tmp=$( 
         ( alias | cut -d'=' -f1
           print -l ${(ok)functions}
           find -L ~/.scr/ -type f | grep -v "nn_" | grep -v ".md"
         ) | 
           grep -v "^_" | fzf
        )
    if [[ $__tmp == nn_* ]]; then
        $__tmp
    else
        print -z "$__tmp "
    fi
    unset __tmp
}

lfcd() {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

sreplay(){
    idx=$1
    scriptreplay -t "time$idx" "typescript$idx" -d 5 -m 1
}

gnmap(){
    awk -e '/Ports: / { host=$2; sub(/.*Ports: /, ""); split($0, a, ","); for(idx in a){ printf "%s: %s\n", host, a[idx] } }' "$1" \
        | sed "s/ //g" | tr "\t" " " | cut -d" " -f1
}
regex(){ gawk 'match($0,/'$1'/, ary) {print ary['${2:-'0'}']}'; }
# 1}}}

# ---------- Plugins ---------- 
# {{{1

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Custom Scripts
[ -e ~/.scr ] && for nn in $(find ~/.scr/ -iname "nn_*"); do
    source "$nn"
done

# Syntax Highlighting
if [ -d "/usr/share/zsh-syntax-highlighting" ]; then
    syntax_hl="/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
elif [ -d "/usr/share/zsh/plugins/zsh-syntax-highlighting/" ];then 
    syntax_hl="/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi
[ -f "$syntax_hl" ] && source "$syntax_hl"


# typescript logging
enable_typescript_logging(){
    if [ -z "${TYPESCRIP_LOG+x}" ];then
        export TYPESCRIP_LOG="on"
        log_dir="$(cat $HOME/.typescript_log)"
        max_log_num=$(ls "$log_dir" | grep -Px --color=never "time\d+" | \
            sed 's/time//' | \
            sort -nr | \
            head -1)
        let next_log_num="$max_log_num+1"
        tslog="$log_dir/typescript$next_log_num"
        tstimelog="$log_dir/time$next_log_num"
        script -t"$tstimelog" "$tslog"
    fi
}
[ -s "$HOME/.typescript_log" ] && enable_typescript_logging

# 1}}}

# gpg ssh and pass settings
# {{{1
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent

fix_pinentry(){gpg-connect-agent updatestartuptty /bye >/dev/null}
if [ -f "/usr/local/bin/ssh" ]; then
    ssh_path="/usr/local/bin/ssh"
elif [ -f "/usr/bin/ssh" ]; then
    ssh_path="/usr/bin/ssh"
else
    ssh_path=false
fi
if [ "$ssh_path" != false ];then 
    ssh(){fix_pinentry; "$ssh_path" $@} 
fi
gpush(){fix_pinentry; /usr/bin/git push $@}
gpull(){fix_pinentry; /usr/bin/git pull $@}
rsync(){fix_pinentry; /usr/bin/rsync -arvphsS --progress $@}

fzf_pass(){find "$HOME"/.password-store -iname "*.gpg" | sed "s/\.gpg//g;s#\./##g;s#$HOME/.password-store/##g" | rofi -dmenu -i }
# 1}}}
